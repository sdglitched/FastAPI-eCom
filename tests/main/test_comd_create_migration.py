import pytest
from alembic import command, config
from click.testing import CliRunner
from pytest_mock import MockerFixture
from sqlalchemy import URL

from fastapi_ecom.main import main
from tests import _alempath


@pytest.mark.parametrize(
    "cmd, autogen, comment, code",
    [pytest.param("create-migration", "--autogenerate", "TEST", 0, id="MAIN Function - CREATE-MIGRATION - Create a new revision for the database")],
)
def test_comd_create_migration(
    runner: CliRunner, get_test_database_url: URL, mocker: MockerFixture, cmd: str, autogen: str, comment: str, code: int
) -> None:
    """
    Test the functionality cli `create-migration` command.

    :param runner: Fixture to invoke CLI commands programmatically.
    :param get_test_database_url: The fixture which generates test database URL.
    :param mocker: Mock fixture to be used for mocking desired functionality.
    :param cmd: The command to test.
    :param autogen: Flag to indicate whether the migration should be autogenerated.
    :param comment: Name of the revision to be created.
    :param code: Expected exit code.

    :return:
    """
    """
    Perform the action to setup the `alembic_version` table
    """
    # Set up Alembic configuration for migration management.
    alembic_config = config.Config(_alempath()[1])
    alembic_config.set_main_option("script_location", _alempath()[0])
    alembic_config.set_main_option("sqlalchemy.url", get_test_database_url.render_as_string())

    # Mark the database at the latest migration head.
    command.stamp(alembic_config, "head")

    """
    Mock the Alembic command which generates revisions
    """
    mocker.patch("alembic.command.revision")

    """
    Perform the action of invoking CLI command
    """
    result = runner.invoke(main, [cmd, comment, autogen])

    """
    Test the response of the CLI
    """
    assert result.exit_code == code
