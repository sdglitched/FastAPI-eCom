import click

from fastapi_ecom.app import start_service
from fastapi_ecom.database.db_setup import make_database
from fastapi_ecom.migrations.main import alembic_migration
from fastapi_ecom.utils.logging_setup import general, success


@click.group(name="fastapi_ecom", help="E-Commerce API for businesses and end users using FastAPI.")
def main() -> None:
    """
    E-Commerce API for businesses and end users using FastAPI.

    This CLI tool provides various commands to manage the database schema, start the application,
    and handle migrations.

    :return: None
    """
    pass


@main.command(name="setup", help="Setup the database schema")
def setup() -> None:
    """
    Setup the database schema.

    Initializes the database by creating the necessary tables and schema.

    :return: None
    """
    general("Setting up database schema")
    make_database()
    success("Database schema setup completed")


@main.command(name="start", help="Start the FastAPI eComm application")
def start() -> None:
    """
    Start the FastAPI eComm application.

    This command starts the FastAPI application, allowing it to serve HTTP requests.

    :return: None
    """
    general("Starting FastAPI eComm application")
    start_service()


@main.command(name="create-migration", help="Create a new migration script")
@click.argument("comment", type=str)
@click.option("--autogenerate", is_flag=True, help="Automatically generate the migration")
def create_migration(comment: str, autogenerate: bool) -> None:
    """
    Create a new migration script.

    :param comment: A descriptive comment for the migration script.
    :param autogenerate: Flag to indicate whether the migration should be autogenerated.

    :return: None
    """
    general(f"Creating migration with comment: {comment}")
    alembic_migration.create(comment, autogenerate)
    success(f"Migration created successfully: {comment}")


@main.command(name="db-version", help="Show the current database version")
def db_version() -> None:
    """
    Show the current database version.

    Prints the current revision of the database schema.

    :return: None
    """
    general("Checking database version")
    alembic_migration.db_version()


@main.command(name="upgrade-db", help="Upgrade the database to a specific version")
@click.argument("version", type=str, default="head")
def upgrade_db(version: str) -> None:
    """
    Upgrade the database to the specified version.

    :param version: The target database version to upgrade to. Defaults to "head" for the latest
                    version or a specific revision ID.

    :return: None
    """
    general(f"Upgrading database to version: {version}")
    alembic_migration.upgrade(version)
    success(f"Database upgraded to version: {version}")


@main.command(name="downgrade-db", help="Downgrade the database to a specific version")
@click.argument("version", type=str)
def downgrade_db(version: str) -> None:
    """
    Downgrade the database to the specified version.

    :param version: The target database version to downgrade to, e.g., "base" or a specific
                    revision ID.

    :return: None
    """
    general(f"Downgrading database to version: {version}")
    alembic_migration.downgrade(version)
    success(f"Database downgraded to version: {version}")
