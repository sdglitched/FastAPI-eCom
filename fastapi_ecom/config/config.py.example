from logging import getLogger
from logging.config import dictConfig

# The database name
database = "test_db"

# The username for the database user
username = "test_user"

# The password for the database user
password = "test_pwd"

# The location of serving the database service
dtbsbhost = "localhost"

# The port on which the database service is hosted
dtbsbport = "5432"

# The driver used to access the database
dtbsdriver = "postgresql+asyncpg"

# Set the echo for logging of all SQL statements
confecho = True

# The location of serving the application service
servhost = "127.0.0.1"

# The port on which the application service is hosted
servport = 8080

# Automatically reload if the code is changed
cgreload = True

# Google client id
GOOGLE_CLIENT_ID = "example.apps.googleusercontent.com"

# Google Client secret
GOOGLE_CLIENT_SECRET = "example"

# The default configuration for service logging
log_config = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(message)s %(asctime)s",
            "datefmt": "[%Y-%m-%d %I:%M:%S %z]",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "formatter": "standard",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",
        },
    },
    "loggers": {
        "fastapi_ecom": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },     
    },
}

dictConfig(log_config)

logger = getLogger(__name__)
